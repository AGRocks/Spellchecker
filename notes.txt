Multi-Language Spell Checker

Motivation:

When developing Software with an UI other than english, spell checker needs to be able to spell check enligsh and the UI langauge,
because many programmers still use english for comments, error messages etc. 

Implemented Features:

- Support for spell checking multiple languages.
   The checker checks for correct spelling in multiple configurable languages in the same text.
- Exclusion of Email addresses.

Todo:
Currently the languages are statically configured in the file SpellingTagger.Langauge string.
I've never implemented a VisualStudio extension, so I don't know how to create a configuration dialog in the VisualStudio configurations.


Changes:

SpellingTagger.cs:

class SpellingTagger:

- Introduced SpellingTagger.Language Property

CheckSpellings:
Instead of only one textBox, there is a List of textBoxes for each language:

			var textBoxes = new List<TextBox>();

			foreach (var lang in Languages.Split(new char[] { ';', ',' }, StringSplitOptions.RemoveEmptyEntries)) {
				TextBox textBox = new TextBox();
				textBox.SpellCheck.IsEnabled = true;
				textBox.Language = System.Windows.Markup.XmlLanguage.GetLanguage(lang);
				textBoxes.Add(textBox);
			}
			
GetMisspellingsInSpans:
This method now checks in every configured language. Instead of the textBox parameter it expects a List of textboxes.

The while loop looping over spelling errors is changed as follows:

                 var currentLang = textBoxes.First();
	
						...

                 // Now pass these off to WPF.
                    foreach (var textBox in textBoxes) textBox.Text = textToParse;

                    int nextSearchIndex = 0;
                    int nextSpellingErrorIndex = -1;
	                 int nextSpellingErrorIndexOtherLang = -1;

                    while (-1 != (nextSpellingErrorIndex = currentLang.GetNextSpellingErrorCharacterIndex(nextSearchIndex, LogicalDirection.Forward)))
                    {
	                     TextBox validInLang;
	                     while (
	                         (validInLang = textBoxes
	                            .Where(lang => lang != currentLang)
	                            .FirstOrDefault(lang => {
	                                nextSpellingErrorIndexOtherLang = lang.GetNextSpellingErrorCharacterIndex(nextSpellingErrorIndex, LogicalDirection.Forward);
	                                return  nextSpellingErrorIndexOtherLang == -1 ||nextSpellingErrorIndexOtherLang > nextSpellingErrorIndex;
                               }))
                            != null) 
                        {
                            currentLang = validInLang;
                            if (nextSpellingErrorIndexOtherLang == -1) break;
                            nextSpellingErrorIndex = nextSpellingErrorIndexOtherLang;
                        }
                        if (nextSpellingErrorIndexOtherLang == -1) break;

                        var spellingError = currentLang.GetSpellingError(nextSpellingErrorIndex);
                        int length = currentLang.GetSpellingErrorLength(nextSpellingErrorIndex);


ProbablyARealWord:

Exclusion of words that contain @.